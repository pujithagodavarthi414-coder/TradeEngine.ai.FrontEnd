import { Action } from '@ngrx/store';
import { TestCase, TestCaseTitle, TestCaseHistoryModel } from '../../models/testcase';
import { Update } from '@ngrx/entity';
import { UpdateMultiple } from '../../models/updatemultiple';
import { TestCasesShift, MoveTestCasesModel } from '../../models/testcaseshift';
import { HistoryModel } from '../../models/history';

export enum TestCaseActionTypes {
    LoadTestCaseTriggered = '[Snovasys-TM] [Test Case Component] Initial Test Case Load Triggered',
    LoadTestCaseCompleted = '[Snovasys-TM] [Test Case Component] Initial Test Case Load Completed',
    LoadTestCaseScenarioStatusTriggered = '[Snovasys-TM] [Test Case Component] Initial Test Case Scenario Status Load Triggered',
    LoadTestCaseScenarioStatusCompleted = '[Snovasys-TM] [Test Case Component] Initial Test Case Scenario Status Load Completed',
    LoadTestCaseTitleTriggered = '[Snovasys-TM] [Test Case Component] Initial Test Case Title Load Triggered',
    LoadTestCaseTitleCompleted = '[Snovasys-TM] [Test Case Component] Initial Test Case Title Load Completed',
    LoadTestCaseAssignToTriggered = '[Snovasys-TM] [Test Case Component] Initial Test Case Assign To Load Triggered',
    LoadTestCaseAssignToCompleted = '[Snovasys-TM] [Test Case Component] Initial Test Case Assign To Load Completed',
    LoadTestCaseStatusTriggered = '[Snovasys-TM] [Test Case Component] Initial Test Case Status Load Triggered',
    LoadTestCaseStatusCompleted = '[Snovasys-TM] [Test Case Component] Initial Test Case Status Load Completed',
    LoadTestCaseTitleDeleteTriggered = '[Snovasys-TM] [Test Case Component] Initial Test Case Delete Load Triggered',
    LoadTestCaseTitleDeleteCompleted = '[Snovasys-TM] [Test Case Component] Initial Test Case Delete Load Completed',
    LoadMultipleTestCasesDelete = '[Snovasys-TM] [Test Case Component] Initial Multiple Test Cases Delete',
    LoadTestCaseScenarioDeleteTriggered = '[Snovasys-TM] [Test Case Component] Initial Hierarchical Test Case Scenario Delete Load Triggered',
    LoadTestCaseScenarioDeleteCompleted = '[Snovasys-TM] [Test Case Component] Initial Hierarchical Test Case Scenario Delete Load Completed',
    LoadTestCaseDetailsTriggered = '[Snovasys-TM] [Test Case Component] Initial Test Case Details Load Triggered',
    LoadTestCaseDetailsCompleted = '[Snovasys-TM] [Test Case Component] Initial Test Case Details Load Completed',
    LoadTestCaseReorderTriggered = '[Snovasys-TM] [Test Case Component] Test Case Reorder Triggered',
    LoadTestCaseReorderCompleted = '[Snovasys-TM] [Test Case Component] Test Case Reorder Completed',
    LoadTestCaseAfterReorderEditTriggered = '[Snovasys-TM] [Test Case Component] Test Case After Reorder Edit Triggered',
    LoadTestCaseAfterReorderEditCompleted = '[Snovasys-TM] [Test Case Component] Test Case After Reorder Edit Completed',
    LoadTestCasesAfterReorderCompleted = '[Snovasys-TM] [Test Case Component] Test Cases After Reorder Completed',
    LoadMoveTestCasesTriggered = '[Snovasys-TM] [Test Case Component] Test Case Move Triggered',
    LoadMoveTestCasesCompleted = '[Snovasys-TM] [Test Case Component] Test Case Move Completed',
    DeleteMultipleTestCases = '[Snovasys-TM] [Test Case Component] Delete Multiple Test Cases',
    LoadTestCaseViewTriggered = '[Snovasys-TM] [Test Case Component] Initial Test Case View Triggered',
    LoadTestCaseViewCompleted = '[Snovasys-TM] [Test Case Component] Initial Test Case View Completed',
    LoadTestCasesBySectionIdTriggered = '[Snovasys-TM] [Test Case Component] Initial Test Cases By Section Id Load Triggered',
    LoadTestCasesBySectionIdCompleted = '[Snovasys-TM] [Test Case Component] Initial Test Cases By Section Id Load Completed',
    LoadTestCasesByUserStoryIdTriggered = '[Snovasys-TM] [Test Case Component] Initial Test Cases By User Story Id Load Triggered',
    LoadTestCasesByUserStoryIdCompleted = '[Snovasys-TM] [Test Case Component] Initial Test Cases By User Story Id Load Completed',
    LoadBugsByUserStoryIdTriggered = '[Snovasys-TM] [Test Case Component] Initial Bugs By User Story Id Load Triggered',
    LoadBugsByUserStoryIdCompleted = '[Snovasys-TM] [Test Case Component] Initial Bugs By User Story Id Load Completed',
    LoadBugsByTestCaseIdTriggered = '[Snovasys-TM] [Test Case Component] Initial Bugs By Test Case Id Load Triggered',
    LoadBugsByTestCaseIdCompleted = '[Snovasys-TM] [Test Case Component] Initial Bugs By Test Case Id Load Completed',
    LoadBugsByGoalIdTriggered = '[Snovasys-TM] [Test Case Component] Initial Bugs By Goal Id Load Triggered',
    LoadBugsByGoalIdCompleted = '[Snovasys-TM] [Test Case Component] Initial Bugs By Goal Id Load Completed',
    LoadHistoryByUserStoryIdTriggered = '[Snovasys-TM] [Test Case Component] Initial History By User Story Id Load Triggered',
    LoadHistoryByUserStoryIdCompleted = '[Snovasys-TM] [Test Case Component] Initial History By User Story Id Load Completed',
    LoadSingleTestCaseBySectionIdTriggered = '[Snovasys-TM] [Test Case Component] Initial Single Test Case By Section Id Load Triggered',
    LoadSingleTestCaseBySectionIdCompleted = '[Snovasys-TM] [Test Case Component] Initial Single Test Case By Section Id Load Completed',
    LoadSingleTestRunCaseBySectionIdTriggered = '[Snovasys-TM] [Test Case Component] Initial Single Test Run Case By Section Id Load Triggered',
    LoadSingleTestRunCaseBySectionIdCompleted = '[Snovasys-TM] [Test Case Component] Initial Single Test Run Case By Section Id Load Completed',
    LoadMultipleTestCasesBySectionIdTriggered = '[Snovasys-TM] [Test Case Component] Initial Multiple Test Cases By Section Id Load Triggered',
    LoadMultipleTestCasesBySectionIdCompleted = '[Snovasys-TM] [Test Case Component] Initial Multiple Test Cases By Section Id Load Completed',
    LoadMultipleTestCasesByUserStoryIdTriggered = '[Snovasys-TM] [Test Case Component] Initial Multiple Test Cases By User Story Id Load Triggered',
    LoadMultipleTestCasesByUserStoryIdCompleted = '[Snovasys-TM] [Test Case Component] Initial Multiple Test Cases By User Story Id Load Completed',
    LoadTestCaseAfterEditTriggered = '[Snovasys-TM] [Test Case Component] Initial Test Case After Edit Triggered',
    LoadTestCaseAfterEditCompleted = '[Snovasys-TM] [Test Case Component] Initial Test Case After Edit Completed',
    TestCaseEditWithInPlaceUpdate = '[Snovasys-TM] [Test Case Component] Initial Test Case Update',
    LoadSingleTestCasesByUserStoryIdEditCompleted = '[Snovasys-TM] [Test Case Component] Initial Load Single Test Case Scenario Update',
    LoadTestCasesBySectionAndRunIdTriggered = '[Snovasys-TM] [Test Case Component] Initial Test Cases By Section And Run Id Load Triggered',
    LoadTestCasesBySectionAndRunIdCompleted = '[Snovasys-TM] [Test Case Component] Initial Test Cases By Section And Run Id Load Completed',
    LoadTestCaseBySectionAndRunIdAfterStatusTriggered = '[Snovasys-TM] [Test Case Component] Initial Test Case By Section And Run Id In Status Load Triggered',
    LoadTestCaseBySectionAndRunIdAfterStatusCompleted = '[Snovasys-TM] [Test Case Component] Initial Test Case By Section And Run Id In Status Load Completed',
    LoadTestCaseBySectionAndRunIdAfterBugStatusTriggered = '[Snovasys-TM] [Test Case Component] Initial Test Case By Section And Run Id In Bug Status Load Triggered',
    LoadTestCaseBySectionAndRunIdAfterBugStatusCompleted = '[Snovasys-TM] [Test Case Component] Initial Test Case By Section And Run Id In Bug Status Load Completed',
    TestCaseStatusEditWithInPlaceUpdateForStatus = '[Snovasys-TM] [Test Case Component] Initial Test Case Status Update',
    TestCaseStatusEditWithInPlaceUpdateForBugStatus = '[Snovasys-TM] [Test Case Component] Initial Test Case Bug Status Update',
    LoadTestCasesBySectionIdForRunsTriggered = '[Snovasys-TM] [Test Case Component] Initial Test Cases By Section Id For Runs Load Triggered',
    LoadTestCasesBySectionIdForRunsCompleted = '[Snovasys-TM] [Test Case Component] Initial Test Cases By Section Id For Runs Load Completed',
    LoadTestCasesByFilterForRunsTriggered = '[Snovasys-TM] [Test Case Component] Initial Test Cases By Filter For Runs Load Triggered',
    LoadTestCasesByFilterForRunsCompleted = '[Snovasys-TM] [Test Case Component] Initial Test Cases By Filter For Runs Load Completed',
    LoadTestCasesByFilterForSuitesTriggered = '[Snovasys-TM] [Test Case Component] Initial Test Cases By Filter For Suites Load Triggered',
    LoadTestCasesByFilterForSuitesCompleted = '[Snovasys-TM] [Test Case Component] Initial Test Cases By Filter For Suites Load Completed',
    LoadMultipleTestRunResultTriggered = '[Snovasys-TM] [Test Case Component] Initial Multiple Test Cases Result Load Triggered',
    LoadMultipleTestRunResultCompleted = '[Snovasys-TM] [Test Case Component] Initial Multiple Test Cases Result Load Completed',
    LoadUpdateTestRunResultTriggered = '[Snovasys-TM] [Test Case Component] Initial Update Test Case Result Load Triggered',
    LoadUpdateTestRunResultCompleted = '[Snovasys-TM] [Test Case Component] Initial Update Test Case Result Load Completed',
    LoadCopyOrMoveCasesTriggered = '[Snovasys-TM] [Test Case Component] Initial Copy Or Move Cases Load Triggered',
    LoadCopyOrMoveCasesCompleted = '[Snovasys-TM] [Test Case Component] Initial Copy Or Move Cases Load Completed',
    LoadTestCaseStatusFailed = '[Snovasys-TM] [Test Case Component] Test Case Status Load Failed',
    TestCaseStatusExceptionHandled = '[Snovasys-TM] [Test Case Component] Test Case Status Exception Handled',
    LoadTestCaseFailed = '[Snovasys-TM] [Test Case Component] Test Case Load Failed',
    TestCaseExceptionHandled = '[Snovasys-TM] [Test Case Component] Test Case Exception Handled',
    LoadTestCaseStepTriggered = '[Snovasys-TM] [Test Case Component] Initial Test Case Step Load Triggered',
    LoadTestCaseStepCompleted = '[Snovasys-TM] [Test Case Component] Initial Test Case Step Load Completed',
    LoadTestCaseStepAfterEditTriggered = '[Snovasys-TM] [Test Case Component] Initial Test Case Step After Edit Triggered',
    LoadTestCaseStepAfterEditCompleted = '[Snovasys-TM] [Test Case Component] Initial Test Case Step After Edit Completed',
    LoadTestCaseHistoryTriggered = '[Snovasys-TM] [Test Case Component] Test Case History Triggered',
    LoadTestCaseHistoryCompleted = '[Snovasys-TM] [Test Case Component] Test Case History Completed',
    LoadTestCaseHistotyFailed = '[Snovasys-TM] [Test Case Component] Test Case History Failed'
}

export class LoadTestCaseTriggered implements Action {
    type = TestCaseActionTypes.LoadTestCaseTriggered;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseEditId: string;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public testCase: TestCase) { }
}

export class LoadTestCaseCompleted implements Action {
    type = TestCaseActionTypes.LoadTestCaseCompleted;
    testCase: TestCase;
    deleteMovedCases: string[];
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseEditId: string;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public testCaseId: string) { }
}

export class LoadTestCaseScenarioStatusTriggered implements Action {
    type = TestCaseActionTypes.LoadTestCaseScenarioStatusTriggered;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public testCaseStatusScenario: TestCase) { }
}

export class LoadTestCaseScenarioStatusCompleted implements Action {
    type = TestCaseActionTypes.LoadTestCaseScenarioStatusCompleted;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public testCaseStatusScenarioData: TestCase) { }
}

export class LoadTestCaseTitleTriggered implements Action {
    type = TestCaseActionTypes.LoadTestCaseTitleTriggered;
    testCase: TestCase;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public testCaseTitle: TestCaseTitle) { }
}

export class LoadTestCaseTitleCompleted implements Action {
    type = TestCaseActionTypes.LoadTestCaseTitleCompleted;
    testCase: TestCase;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public testCaseTitleId: string[]) { }
}

export class LoadTestCaseReorderTriggered implements Action {
    type = TestCaseActionTypes.LoadTestCaseReorderTriggered;
    testCase: TestCase;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public testCaseIdList: string[]) { }
}

export class LoadTestCaseReorderCompleted implements Action {
    type = TestCaseActionTypes.LoadTestCaseReorderCompleted;
    testCase: TestCase;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor() { }
}

export class LoadMoveTestCasesTriggered implements Action {
    type = TestCaseActionTypes.LoadMoveTestCasesTriggered;
    testCase: TestCase;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public moveTestCasesModel: MoveTestCasesModel) { }
}

export class LoadMoveTestCasesCompleted implements Action {
    type = TestCaseActionTypes.LoadMoveTestCasesCompleted;
    testCase: TestCase;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public moveSectionId: string) { }
}

export class DeleteMultipleTestCases implements Action {
    type = TestCaseActionTypes.DeleteMultipleTestCases;
    testCase: TestCase;
    testCaseId: string;
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public deleteMovedCases: string[]) { }
}

export class LoadTestCaseAssignToTriggered implements Action {
    type = TestCaseActionTypes.LoadTestCaseAssignToTriggered;
    testCase: TestCase;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public testCaseAssignTo: TestCase) { }
}

export class LoadTestCaseAssignToCompleted implements Action {
    type = TestCaseActionTypes.LoadTestCaseAssignToCompleted;
    testCase: TestCase;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public assignToId: string) { }
}

export class LoadTestCaseStatusTriggered implements Action {
    type = TestCaseActionTypes.LoadTestCaseStatusTriggered;
    testCase: TestCase;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public testCaseStatus: TestCase) { }
}

export class LoadTestCaseStatusCompleted implements Action {
    type = TestCaseActionTypes.LoadTestCaseStatusCompleted;
    testCase: TestCase;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseStatus: TestCase;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public statusId: string) { }
}

export class LoadTestCaseTitleDeleteTriggered implements Action {
    type = TestCaseActionTypes.LoadTestCaseTitleDeleteTriggered;
    testCase: TestCase;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public testCaseDelete: TestCaseTitle) { }
}

export class LoadTestCaseTitleDeleteCompleted implements Action {
    type = TestCaseActionTypes.LoadTestCaseTitleDeleteCompleted;
    testCase: TestCase;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public testCaseDeleteId: string) { }
}

export class LoadMultipleTestCasesDelete implements Action {
    type = TestCaseActionTypes.LoadMultipleTestCasesDelete;
    testCase: TestCase;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public testCaseDelete: TestCaseTitle) { }
}

export class LoadTestCaseScenarioDeleteTriggered implements Action {
    type = TestCaseActionTypes.LoadTestCaseScenarioDeleteTriggered;
    testCase: TestCase;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDeleteId: string;
    testCaseDelete: TestCaseTitle;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public testCaseScenarioDelete: TestCase) { }
}

export class LoadTestCaseScenarioDeleteCompleted implements Action {
    type = TestCaseActionTypes.LoadTestCaseScenarioDeleteCompleted;
    testCase: TestCase;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseDelete: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseTitleId: string[];
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public testCaseScenarioDeletedId: string) { }
}

export class LoadTestCaseDetailsTriggered implements Action {
    type = TestCaseActionTypes.LoadTestCaseDetailsTriggered;
    testCase: TestCase;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public testCaseEditId: string) { }
}

export class LoadTestCaseDetailsCompleted implements Action {
    type = TestCaseActionTypes.LoadTestCaseDetailsCompleted;
    testCase: TestCase;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public testCaseDetails: TestCase) { }
}

export class LoadTestCaseViewTriggered implements Action {
    type = TestCaseActionTypes.LoadTestCaseViewTriggered;
    testCase: TestCase;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseDetails: TestCase;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public testCaseViewDetails: TestCase) { }
}

export class LoadTestCaseViewCompleted implements Action {
    type = TestCaseActionTypes.LoadTestCaseViewCompleted;
    testCase: TestCase;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseDetails: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public testCaseViewDetails: string) { }
}

export class LoadTestCasesBySectionIdTriggered implements Action {
    type = TestCaseActionTypes.LoadTestCasesBySectionIdTriggered;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public searchCasesSectionDetails: TestCase) { }
}

export class LoadTestCasesBySectionIdCompleted implements Action {
    type = TestCaseActionTypes.LoadTestCasesBySectionIdCompleted;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public testCases: TestCase[]) { }
}

export class LoadTestCaseAfterReorderEditTriggered implements Action {
    type = TestCaseActionTypes.LoadTestCaseAfterReorderEditTriggered;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public searchCasesSectionDetails: TestCase) { }
}

export class LoadTestCaseAfterReorderEditCompleted implements Action {
    type = TestCaseActionTypes.LoadTestCaseAfterReorderEditCompleted;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public testCases: TestCase[]) { }
}

export class LoadTestCasesAfterReorderCompleted implements Action {
    type = TestCaseActionTypes.LoadTestCasesAfterReorderCompleted;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public testCases: TestCase[]) { }
}

export class LoadSingleTestCaseBySectionIdTriggered implements Action {
    type = TestCaseActionTypes.LoadSingleTestCaseBySectionIdTriggered;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public searchSingleCaseDetails: TestCase) { }
}

export class LoadSingleTestCaseBySectionIdCompleted implements Action {
    type = TestCaseActionTypes.LoadSingleTestCaseBySectionIdCompleted;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public singleCaseDetails: TestCase) { }
}

export class LoadSingleTestRunCaseBySectionIdTriggered implements Action {
    type = TestCaseActionTypes.LoadSingleTestRunCaseBySectionIdTriggered;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    singleCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public searchSingleRunCaseDetails: TestCase) { }
}

export class LoadSingleTestRunCaseBySectionIdCompleted implements Action {
    type = TestCaseActionTypes.LoadSingleTestRunCaseBySectionIdCompleted;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public singleRunCaseDetails: TestCase) { }
}

export class LoadMultipleTestCasesBySectionIdTriggered implements Action {
    type = TestCaseActionTypes.LoadMultipleTestCasesBySectionIdTriggered;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public searchMultipleCasesSectionDetails: TestCase) { }
}

export class LoadMultipleTestCasesBySectionIdCompleted implements Action {
    type = TestCaseActionTypes.LoadMultipleTestCasesBySectionIdCompleted;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public multipleTestCases: TestCase[]) { }
}
export class LoadMultipleTestCasesByUserStoryIdTriggered implements Action {
    type = TestCaseActionTypes.LoadMultipleTestCasesByUserStoryIdTriggered;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    multipleTestCases: TestCase[];
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public searchMultipleCasesByUserStoryId: TestCase) { }
}

export class LoadMultipleTestCasesByUserStoryIdCompleted implements Action {
    type = TestCaseActionTypes.LoadMultipleTestCasesByUserStoryIdCompleted;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public multipleTestCasesByUserStoryId: TestCase[]) { }
}


export class LoadTestCasesByUserStoryIdTriggered implements Action {
    type = TestCaseActionTypes.LoadTestCasesByUserStoryIdTriggered;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    searchCasesSectionDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    multipleTestCases: TestCase[];
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public searchTestCasesByUserStoryId: TestCase) { }
}

export class LoadTestCasesByUserStoryIdCompleted implements Action {
    type = TestCaseActionTypes.LoadTestCasesByUserStoryIdCompleted;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    searchCasesSectionDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCaseDelete: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public testCasesByUserStoryId: TestCase[]) { }
}

export class LoadBugsByUserStoryIdTriggered implements Action {
    type = TestCaseActionTypes.LoadBugsByUserStoryIdTriggered;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    searchCasesSectionDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    multipleTestCases: TestCase[];
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public searchBugsByUserStoryId: TestCase) { }
}

export class LoadBugsByUserStoryIdCompleted implements Action {
    type = TestCaseActionTypes.LoadBugsByUserStoryIdCompleted;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    searchCasesSectionDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    multipleTestCases: TestCase[];
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public bugsByUserStoryId: TestCase[]) { }
}

export class LoadBugsByTestCaseIdTriggered implements Action {
    type = TestCaseActionTypes.LoadBugsByTestCaseIdTriggered;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    searchCasesSectionDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    multipleTestCases: TestCase[];
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public searchBugsByUserStoryId: TestCase) { }
}

export class LoadBugsByTestCaseIdCompleted implements Action {
    type = TestCaseActionTypes.LoadBugsByTestCaseIdCompleted;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    searchCasesSectionDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    multipleTestCases: TestCase[];
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public bugsByUserStoryId: TestCase[]) { }
}

export class LoadBugsByGoalIdTriggered implements Action {
    type = TestCaseActionTypes.LoadBugsByGoalIdTriggered;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    searchCasesSectionDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    multipleTestCases: TestCase[];
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    bugsByUserStoryId: TestCase[];
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public searchBugsByGoalId: TestCase) { }
}

export class LoadBugsByGoalIdCompleted implements Action {
    type = TestCaseActionTypes.LoadBugsByGoalIdCompleted;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    searchCasesSectionDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    multipleTestCases: TestCase[];
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public bugsByGoalId: TestCase[]) { }
}

export class LoadHistoryByUserStoryIdTriggered implements Action {
    type = TestCaseActionTypes.LoadHistoryByUserStoryIdTriggered;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    searchCasesSectionDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCaseScenarioDelete: TestCase;
    historyByUserStoryId: TestCaseHistoryModel[];
    testCaseScenarioDeletedId: string;
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    constructor(public history: HistoryModel) { }
}

export class LoadHistoryByUserStoryIdCompleted implements Action {
    type = TestCaseActionTypes.LoadHistoryByUserStoryIdCompleted;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    searchCasesSectionDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    multipleTestCases: TestCase[];
    getHistoryByUserStoryId: string;
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public historyByUserStoryId: TestCaseHistoryModel[]) { }
}

export class LoadTestCaseAfterEditTriggered implements Action {
    type = TestCaseActionTypes.LoadTestCaseAfterEditTriggered;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public searchCaseAfterEdit: TestCase) { }
}

export class LoadTestCaseAfterEditCompleted implements Action {
    type = TestCaseActionTypes.LoadTestCaseAfterEditCompleted;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    searchCasesSectionDetails: TestCase;
    testCaseDelete: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public testCasesAfterEdit: TestCase[]) { }
}

export class TestCaseEditWithInPlaceUpdate implements Action {
    type = TestCaseActionTypes.TestCaseEditWithInPlaceUpdate;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    searchCasesSectionDetails: TestCase;
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public caseEditsUpdate: { caseEditUpdate: Update<TestCase> }) { }
}

export class LoadSingleTestCasesByUserStoryIdEditCompleted implements Action {
    type = TestCaseActionTypes.LoadSingleTestCasesByUserStoryIdEditCompleted;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    searchCasesSectionDetailsForRun: TestCase;
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    searchCasesSectionDetails: TestCase;
    testCaseDelete: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    testCaseDeleteId: string;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public singleCaseScenarioEditUpdate: TestCase[]) { }
}

export class LoadTestCasesBySectionAndRunIdTriggered implements Action {
    type = TestCaseActionTypes.LoadTestCasesBySectionAndRunIdTriggered;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    searchCasesSectionDetails: TestCase;
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    testCases: TestCase[];
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public searchCasesSectionRunDetails: TestCase) { }
}

export class LoadTestCasesBySectionAndRunIdCompleted implements Action {
    type = TestCaseActionTypes.LoadTestCasesBySectionAndRunIdCompleted;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionRunDetails: TestCase;
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public testCasesByRuns: TestCase[]) { }
}

export class LoadTestCaseBySectionAndRunIdAfterStatusTriggered implements Action {
    type = TestCaseActionTypes.LoadTestCaseBySectionAndRunIdAfterStatusTriggered;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    searchCasesSectionDetails: TestCase;
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    testCases: TestCase[];
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public searchCaseAfterStatus: TestCase) { }
}

export class LoadTestCaseBySectionAndRunIdAfterStatusCompleted implements Action {
    type = TestCaseActionTypes.LoadTestCaseBySectionAndRunIdAfterStatusCompleted;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    searchCaseAfterStatus: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public searchCaseAfterStatusDetails: TestCase) { }
}

export class LoadTestCaseBySectionAndRunIdAfterBugStatusTriggered implements Action {
    type = TestCaseActionTypes.LoadTestCaseBySectionAndRunIdAfterBugStatusTriggered;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    searchCasesSectionDetails: TestCase;
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    testCases: TestCase[];
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public searchCaseAfterStatus: TestCase) { }
}

export class LoadTestCaseBySectionAndRunIdAfterBugStatusCompleted implements Action {
    type = TestCaseActionTypes.LoadTestCaseBySectionAndRunIdAfterBugStatusCompleted;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    searchCaseAfterStatus: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public searchCaseAfterStatusDetails: TestCase) { }
}

export class TestCaseStatusEditWithInPlaceUpdateForStatus implements Action {
    type = TestCaseActionTypes.TestCaseStatusEditWithInPlaceUpdateForStatus;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> }) { }
}

export class TestCaseStatusEditWithInPlaceUpdateForBugStatus implements Action {
    type = TestCaseActionTypes.TestCaseStatusEditWithInPlaceUpdateForBugStatus;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> }) { }
}

export class LoadTestCasesBySectionIdForRunsTriggered implements Action {
    type = TestCaseActionTypes.LoadTestCasesBySectionIdForRunsTriggered;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public searchCasesSectionDetailsForRun: TestCase) { }
}

export class LoadTestCasesBySectionIdForRunsCompleted implements Action {
    type = TestCaseActionTypes.LoadTestCasesBySectionIdForRunsCompleted;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public testCasesForRuns: TestCase[]) { }
}

export class LoadTestCasesByFilterForRunsTriggered implements Action {
    type = TestCaseActionTypes.LoadTestCasesByFilterForRunsTriggered;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public searchCasesByFilterForRuns: TestCase) { }
}

export class LoadTestCasesByFilterForRunsCompleted implements Action {
    type = TestCaseActionTypes.LoadTestCasesByFilterForRunsCompleted;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public filteredCasesForRuns: TestCase[]) { }
}

export class LoadTestCasesByFilterForSuitesTriggered implements Action {
    type = TestCaseActionTypes.LoadTestCasesByFilterForSuitesTriggered;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public searchCasesByFilterForRuns: TestCase) { }
}

export class LoadTestCasesByFilterForSuitesCompleted implements Action {
    type = TestCaseActionTypes.LoadTestCasesByFilterForSuitesCompleted;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public filteredCasesForRuns: TestCase[]) { }
}

export class LoadMultipleTestRunResultTriggered implements Action {
    type = TestCaseActionTypes.LoadMultipleTestRunResultTriggered;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    testCasesForRuns: TestCase[];
    searchCasesSectionDetailsForRun: TestCase;
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    searchCasesSectionDetails: TestCase;
    testCaseDeleteId: string;
    testCases: TestCase[];
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public updateMultipleTestCases: UpdateMultiple) { }
}

export class LoadMultipleTestRunResultCompleted implements Action {
    type = TestCaseActionTypes.LoadMultipleTestRunResultCompleted;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    testCasesForRuns: TestCase[];
    searchCasesSectionDetailsForRun: TestCase;
    testCaseTitle: TestCaseTitle;
    searchCasesSectionDetails: TestCase;
    testCaseTitleId: string[];
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public multipleTestCaseIds: string[]) { }
}

export class LoadUpdateTestRunResultTriggered implements Action {
    type = TestCaseActionTypes.LoadUpdateTestRunResultTriggered;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    testCasesForRuns: TestCase[];
    searchCasesSectionDetailsForRun: TestCase;
    testCaseTitle: TestCaseTitle;
    searchCasesSectionDetails: TestCase;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    testCases: TestCase[];
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public updateSingleTestCase: UpdateMultiple) { }
}

export class LoadUpdateTestRunResultCompleted implements Action {
    type = TestCaseActionTypes.LoadUpdateTestRunResultCompleted;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    testCasesForRuns: TestCase[];
    searchCasesSectionDetails: TestCase;
    searchCasesSectionDetailsForRun: TestCase;
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    testCases: TestCase[];
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public singleTestCaseid: string[]) { }
}

export class LoadCopyOrMoveCasesTriggered implements Action {
    type = TestCaseActionTypes.LoadCopyOrMoveCasesTriggered;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    testCasesForRuns: TestCase[];
    searchCasesSectionDetails: TestCase;
    searchCasesSectionDetailsForRun: TestCase;
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    testCases: TestCase[];
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    singleTestCaseid: string[];
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public copyOrMoveCases: TestCasesShift) { }
}

export class LoadCopyOrMoveCasesCompleted implements Action {
    type = TestCaseActionTypes.LoadCopyOrMoveCasesCompleted;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    testCasesForRuns: TestCase[];
    searchCasesSectionDetails: TestCase;
    searchCasesSectionDetailsForRun: TestCase;
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    testCases: TestCase[];
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public copyOrMoveCasesDoneId: string) { }
}

export class LoadTestCaseFailed implements Action {
    type = TestCaseActionTypes.LoadTestCaseFailed;
    testCase: TestCase;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public validationMessages: string[]) { }
}

export class TestCaseExceptionHandled implements Action {
    type = TestCaseActionTypes.TestCaseExceptionHandled;
    testCase: TestCase;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public errorMessage: string) { }
}

export class LoadTestCaseStatusFailed implements Action {
    type = TestCaseActionTypes.LoadTestCaseStatusFailed;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    searchCasesSectionDetails: TestCase;
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    testCases: TestCase[];
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public validationMessagesForStatus: string[]) { }
}

export class TestCaseStatusExceptionHandled implements Action {
    type = TestCaseActionTypes.TestCaseStatusExceptionHandled;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    searchCasesSectionDetails: TestCase;
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    testCases: TestCase[];
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public errorMessageForStatus: string) { }
}

export class LoadTestCaseStepTriggered implements Action {
    type = TestCaseActionTypes.LoadTestCaseStepTriggered;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseEditId: string;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public testCaseStep: TestCase) { }
}

export class LoadTestCaseStepCompleted implements Action {
    type = TestCaseActionTypes.LoadTestCaseStepCompleted;
    testCase: TestCase;
    testCaseStatusScenario: TestCase;
    deleteMovedCases: string[];
    testCaseStatusScenarioData: TestCase;
    testCaseEditId: string;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    searchCasesSectionDetails: TestCase;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    searchCaseStepAfterEdit: TestCase;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public addTestCaseId: string) { }
}

export class LoadTestCaseStepAfterEditTriggered implements Action {
    type = TestCaseActionTypes.LoadTestCaseStepAfterEditTriggered;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    testCasesAfterEdit: TestCase[];
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    testCaseDelete: TestCaseTitle;
    testCaseDeleteId: string;
    searchCasesSectionDetails: TestCase;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    searchSingleCaseDetails: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchSingleAddCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public searchCaseStepAfterEdit: TestCase) { }
}

export class LoadTestCaseStepAfterEditCompleted implements Action {
    type = TestCaseActionTypes.LoadTestCaseStepAfterEditCompleted;
    testCaseId: string;
    deleteMovedCases: string[];
    testCaseEditId: string;
    testCaseStatusScenario: TestCase;
    testCaseStatusScenarioData: TestCase;
    testCaseDetails: TestCase;
    testCaseAssignTo: TestCase;
    assignToId: string;
    testCaseStatus: TestCase;
    statusId: string;
    searchCasesSectionRunDetails: TestCase;
    testCasesByRuns: TestCase[];
    searchCaseAfterEdit: TestCase;
    caseEditsUpdate: { caseEditUpdate: Update<TestCase> };
    searchCasesSectionDetailsForRun: TestCase;
    testCasesForRuns: TestCase[];
    testCaseTitle: TestCaseTitle;
    testCaseTitleId: string[];
    searchCasesSectionDetails: TestCase;
    testCaseDelete: TestCaseTitle;
    testCaseScenarioDelete: TestCase;
    testCaseScenarioDeletedId: string;
    getHistoryByUserStoryId: string;
    historyByUserStoryId: TestCaseHistoryModel[];
    searchTestCasesByUserStoryId: TestCase;
    singleCaseDetails: TestCase;
    searchSingleRunCaseDetails: TestCase;
    singleRunCaseDetails: TestCase;
    searchMultipleCasesSectionDetails: TestCase;
    multipleTestCases: TestCase[];
    searchMultipleCasesByUserStoryId: TestCase;
    multipleTestCasesByUserStoryId: TestCase[];
    testCasesByUserStoryId: TestCase[];
    searchCasesByFilterForRuns: TestCase;
    filteredCasesForRuns: TestCase[];
    searchBugsByUserStoryId: TestCase;
    bugsByUserStoryId: TestCase[];
    searchBugsByGoalId: TestCase;
    bugsByGoalId: TestCase[];
    singleCaseScenarioEditUpdate: TestCase[];
    testCaseDeleteId: string;
    testCases: TestCase[];
    searchCaseAfterStatus: TestCase;
    searchCaseAfterStatusDetails: TestCase;
    caseStatusesUpdate: { caseStatusUpdate: Update<TestCase> };
    updateMultipleTestCases: UpdateMultiple;
    multipleTestCaseIds: string[];
    updateSingleTestCase: UpdateMultiple;
    singleTestCaseid: string[];
    validationMessagesForStatus: string[];
    errorMessageForStatus: string;
    validationMessages: string[];
    errorMessage: string;
    testCaseStep: TestCase;
    addTestCaseId: string;
    searchCaseStepAfterEdit: TestCase;
    testCasesAfterEdit: TestCase[];
    searchSingleCaseDetails: TestCase;
    historyList: HistoryModel[];
    history: HistoryModel;
    constructor(public searchSingleAddCaseDetails: TestCase) { }
}

export type TestCaseActions = LoadTestCaseTriggered | LoadTestCaseCompleted | LoadTestCaseReorderTriggered | LoadTestCaseReorderCompleted |
    LoadMoveTestCasesTriggered | LoadMoveTestCasesCompleted | DeleteMultipleTestCases | LoadTestCaseScenarioStatusTriggered | LoadTestCaseScenarioStatusCompleted |
    LoadTestCaseTitleTriggered | LoadTestCaseTitleCompleted | LoadTestCaseAssignToTriggered | LoadTestCaseAssignToCompleted | LoadTestCaseStatusTriggered | LoadTestCaseStatusCompleted |
    LoadTestCaseTitleDeleteTriggered | LoadTestCaseTitleDeleteCompleted | LoadTestCaseScenarioDeleteTriggered |
    LoadTestCaseScenarioDeleteCompleted | LoadTestCaseDetailsTriggered | LoadTestCaseDetailsCompleted | LoadTestCasesBySectionIdTriggered |
    LoadTestCasesBySectionIdCompleted | LoadSingleTestCaseBySectionIdTriggered | LoadSingleTestCaseBySectionIdCompleted |
    LoadSingleTestRunCaseBySectionIdTriggered | LoadSingleTestRunCaseBySectionIdCompleted | LoadMultipleTestCasesBySectionIdTriggered |
    LoadMultipleTestCasesBySectionIdCompleted | LoadMultipleTestCasesByUserStoryIdTriggered | LoadMultipleTestCasesByUserStoryIdCompleted |
    LoadTestCasesByUserStoryIdTriggered | LoadTestCasesByUserStoryIdCompleted | LoadBugsByUserStoryIdTriggered |
    LoadBugsByUserStoryIdCompleted | LoadBugsByGoalIdTriggered | LoadBugsByGoalIdCompleted | LoadHistoryByUserStoryIdTriggered |
    LoadHistoryByUserStoryIdCompleted | LoadTestCaseAfterEditTriggered | LoadTestCaseAfterEditCompleted | TestCaseEditWithInPlaceUpdate |
    LoadSingleTestCasesByUserStoryIdEditCompleted | LoadTestCasesBySectionAndRunIdTriggered | LoadTestCasesBySectionAndRunIdCompleted |
    LoadTestCasesBySectionIdForRunsTriggered | LoadTestCasesBySectionIdForRunsCompleted | LoadTestCasesByFilterForRunsTriggered |
    LoadTestCasesByFilterForRunsCompleted | LoadTestCaseBySectionAndRunIdAfterStatusTriggered |
    LoadTestCaseBySectionAndRunIdAfterStatusCompleted | TestCaseStatusEditWithInPlaceUpdateForStatus | LoadMultipleTestRunResultTriggered |
    LoadMultipleTestRunResultCompleted | LoadUpdateTestRunResultTriggered | LoadUpdateTestRunResultCompleted | LoadTestCaseViewTriggered |
    LoadTestCaseViewCompleted | LoadCopyOrMoveCasesTriggered | LoadCopyOrMoveCasesCompleted | LoadTestCaseStatusFailed |
    TestCaseStatusExceptionHandled | LoadTestCaseFailed | TestCaseExceptionHandled | LoadTestCaseStepTriggered | LoadTestCaseStepCompleted |
    LoadTestCaseStepAfterEditTriggered | LoadTestCaseStepAfterEditCompleted | LoadTestCasesAfterReorderCompleted | LoadTestCaseAfterReorderEditTriggered |
    LoadTestCaseAfterReorderEditCompleted | LoadMultipleTestCasesDelete | LoadTestCaseBySectionAndRunIdAfterBugStatusTriggered | LoadTestCaseBySectionAndRunIdAfterBugStatusCompleted |
    TestCaseStatusEditWithInPlaceUpdateForBugStatus | LoadBugsByTestCaseIdTriggered | LoadBugsByTestCaseIdCompleted | LoadTestCasesByFilterForSuitesTriggered | LoadTestCasesByFilterForSuitesCompleted